/**
 * This file is @generated by
 * src/roma/tools/api_plugin/tmpl/common/app/hpp_roma.tmpl. Do not edit.
 * Version: {{getVersion}}
 * Code Generator: {{getRomaGenerator}}
*/

/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{range $file := .Files}}
{{- $defineGuard := $file.Package | printf "%s_" | replace "." "_" | upper}}
#ifndef {{$defineGuard}}H_
#define {{$defineGuard}}H_

#include <memory>

#include "src/roma/config/function_binding_object_v2.h"
#include "{{$file.Name | trimSuffix (ext $file.Name)}}.pb.h"

#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/synchronization/notification.h"
#include "src/roma/interface/roma.h"

{{range $svc := .Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}

namespace {{$svcopts.CppNamespace}} {

using Callback = google::scp::roma::Callback;

/*
 * service: {{$svc.FullName}}
 */
template <typename TMetadata = google::scp::roma::DefaultMetadata>
class {{$svc.Name}} {
 public:

{{- range $rpc := .MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- $respType := $rpc.ResponseFullType | replace "." "::" | printf "::%s" }}
  /*
   * {{$rpc.Name}}
   * {{- $rpc.Description}}
   * request: {{$reqType}}
   * response: {{$respType}}
   */
  virtual absl::Status {{$rpc.Name}}(
      absl::Notification& notification,
      const {{$reqType}}& request,
      absl::StatusOr<std::unique_ptr<{{$respType}}>>& response,
      TMetadata metadata = TMetadata(),
      std::string_view code_token = "") = 0;

  virtual absl::Status {{$rpc.Name}}(
      Callback callback,
      const {{$reqType}}& request,
      TMetadata metadata = TMetadata(),
      std::string_view code_token = "") = 0;

{{end}}
};

}  // namespace {{$svcopts.CppNamespace}}
{{end}}

#endif  // {{$defineGuard}}H_
{{end}}
