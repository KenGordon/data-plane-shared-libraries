/**
 * This file is @generated by
 * src/roma/tools/api_plugin/tmpl/gvisor/app/hpp_roma_gvisor.tmpl. Do not edit.
 * Version: {{getVersion}}
 * Code Generator: {{getRomaGenerator}}
*/

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{range $file := .Files}}
{{- $defineGuard := $file.Package | printf "%s_" | replace "." "_" | upper}}
#ifndef {{$defineGuard}}GVISOR_H_
#define {{$defineGuard}}GVISOR_H_

#include "{{$file.Name | trimSuffix (ext $file.Name)}}_roma_app_service.h"

#include <memory>

#include "src/roma/config/function_binding_object_v2.h"
#include "src/roma/gvisor/interface/roma_service.h"
#include "src/roma/gvisor/config/config.h"
#include "src/util/status_macro/status_macros.h"
#include "{{$file.Name | trimSuffix (ext $file.Name)}}.pb.h"

#include "absl/status/status.h"
#include "absl/strings/str_cat.h"
#include "absl/synchronization/notification.h"

{{range $svc := .Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}

namespace {{$svcopts.CppNamespace}} {

{{- $svcName := printf "Gvisor%s" $svc.Name -}}
{{- $svcCommonInterface := printf "%s::%s"  $svcopts.CppNamespace $svc.Name -}}


/*
 * service: {{$svc.FullName}}
 */
template <typename TMetadata = google::scp::roma::DefaultMetadata>
class {{$svcName}} final :
      public {{$svcCommonInterface}}<TMetadata> {
 public:
  using AppService = privacy_sandbox::server_common::gvisor::RomaService<TMetadata>;
  using Config = privacy_sandbox::server_common::gvisor::Config<TMetadata>;
  using Mode = privacy_sandbox::server_common::gvisor::Mode;

  static absl::StatusOr<{{$svcName}}<TMetadata>> Create(Config config,
                                                        Mode mode) {
    PS_ASSIGN_OR_RETURN(std::unique_ptr<AppService> roma_service,
                        AppService::Create(std::move(config), std::move(mode)));
    return {{$svcName}}<TMetadata>(std::move(roma_service));
  }

  /**
   * @brief Registers a new binary asynchronously from the provided `code_path`.
   *
   * @paragraph Once the load operation has been completed, notification will be
   * sent via absl::Notification namely `notification`. If load is successful,
   * the load_status will be populated with an ok status else with the error
   * status and message. If load is successful, registered service can be called
   * on the code using the `code_token` returned by this function.
   *
   * @param code_path path to the binary to be loaded into the sandbox.
   * @param notification notifies once `load_status` is available.
   * @param load_status is populated with the status of load once load is
   * completed. If the status is ok, then `code_token` returned by this function
   * can be used for calling this binary in subsequent execution requests.
   * @return absl::StatusOr<std::string> returns the `code_token`.
   */
  absl::StatusOr<std::string> Register(std::string_view code_path,
                                       absl::Notification& notification,
                                       absl::Status& load_status) {
    return roma_service_->LoadBinary(
        code_path,
        notification,
        load_status);
  }

{{- range $rpc := .MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- $respType := $rpc.ResponseFullType | replace "." "::" | printf "::%s" }}
  /*
   * @brief Executes {{$rpc.Name}} referred to by the provided `code_token`
   * asynchronously.
   *
   * {{$rpc.Name}}
   * {{- $rpc.Description}}
   *
   * @param notification notifies that `response` is available.
   * @param request {{$reqType}} for the binary.
   * @param response populated with the status once execution is completed. If
   * the status is ok, then `{{$respType}}` returned by this function contains
   * the response else the error.
   * @param metadata for execution request. It is a templated type.
   * @param code_token identifier provided by load of the binary to be executed.
   * @return absl::Status
   */
  absl::Status {{$rpc.Name}}(
      absl::Notification& notification, const {{$reqType}}& request,
      absl::StatusOr<std::unique_ptr<{{$respType}}>>& response,
      TMetadata metadata = TMetadata(), std::string_view code_token = "")
      override {
    return roma_service_->ExecuteBinary(
        // TODO: ashruti - See if it makes sense to map code token to a
        // rpc.Name when loading and call the function using the RPC name.
        code_token, request.SerializeAsString(), std::move(metadata),
        [&response](::grpc::Status status,
                    const std::string& serialized_response) {
          if (status.ok()) {
            // If response is uninitialized, initialize it with a unique_ptr.
            if (!response.ok() || *response == nullptr) {
              response = std::make_unique<{{$respType}}>();
            }
            if (!(**response).ParseFromString(serialized_response)) {
              response = absl::InternalError(
                  "Failed to deserialize response to proto");
            }
          } else {
            response = privacy_sandbox::server_common::ToAbslStatus(status);
          }
        },
        notification);
  }

  absl::Status {{$rpc.Name}}(
      Callback callback,
      const {{$reqType}}& request,
      TMetadata metadata = TMetadata(),
      std::string_view code_token = "") override {
    absl::Notification execute_finished;
    return absl::UnimplementedError("Callback-based {{$rpc.Name}} cannot be used with BYOB");
  }
{{end}}

 private:
  std::unique_ptr<AppService> roma_service_;
  explicit {{$svcName}}(std::unique_ptr<AppService> roma_service)
    : roma_service_(std::move(roma_service)) {}
};

}  // namespace {{$svcopts.CppNamespace}}
{{end}}

#endif  // {{$defineGuard}}GVISOR_H_
{{end}}
