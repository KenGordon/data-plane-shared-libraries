diff --git a/BUILD.bazel b/BUILD.bazel
index b0cf80ede42..95ec2a9157e 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 load("@bazel_skylib//lib:selects.bzl", "selects")
+load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
 load("@rules_python//python:defs.bzl", "py_binary")
 load("@v8_python_deps//:requirements.bzl", "requirement")
 load(
@@ -2560,6 +2561,10 @@ filegroup(
             "src/trap-handler/handler-inside-posix.cc",
             "src/trap-handler/handler-outside-posix.cc",
         ],
+        "@platforms//cpu:aarch64": [
+            "src/trap-handler/handler-inside-posix.cc",
+            "src/trap-handler/handler-outside-posix.cc",
+        ],
         "//conditions:default": [],
     }) + select({
         "@v8//bazel/config:v8_arm64_simulator": [
@@ -4021,6 +4026,12 @@ v8_binary(
     deps = ["v8_libbase"],
 )
 
+copy_file(
+    name = "icudtl_dat",
+    src = "@com_googlesource_chromium_icu//:icudtl_dat",
+    out = "common/icudtl.dat",
+)
+
 v8_binary(
     name = "regexp_special_case_generator",
     srcs = [
diff --git a/bazel/BUILD.icu b/bazel/BUILD.icu
index 2ae79a5784f..66ab6420ee1 100644
--- a/bazel/BUILD.icu
+++ b/bazel/BUILD.icu
@@ -2,11 +2,20 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
+
 filegroup(
     name = "icudata",
     srcs = ["common/icudtl.dat"],
 )
 
+copy_file(
+    name = "icudtl_dat",
+    src = "common/icudtl.dat",
+    out = "icudtl.dat",
+    visibility = ["//visibility:public"],
+)
+
 cc_library(
     name = "icuuc",
     srcs = glob([
@@ -28,7 +37,7 @@ cc_library(
             "-Wno-deprecated-declarations",
         ],
     }),
-    data = [":icudata"],
+    data = [":common/icudtl.dat"],
     defines = [
         "U_COMMON_IMPLEMENTATION",
         "U_ICUDATAENTRY_IN_COMMON",
@@ -93,9 +102,12 @@ cc_library(
         "source/stubdata/stubdata.cpp",
     ],
     hdrs = glob([
+        "source/common/*.h",
         "source/common/unicode/*.h",
         "source/i18n/unicode/*.h",
-    ]),
+    ]) + [
+        "source/stubdata/stubdata.h",
+    ],
     copts = select({
         "@platforms//os:windows": [
             "/wd4005",  # Macro redefinition.
diff --git a/bazel/defs.bzl b/bazel/defs.bzl
index 09844919a5b..33b96106dae 100644
--- a/bazel/defs.bzl
+++ b/bazel/defs.bzl
@@ -121,6 +121,7 @@ def _default_args():
         }) + select({
             "@v8//bazel/config:is_clang": [
                 "-Wno-invalid-offsetof",
+                "-Wno-unneeded-internal-declaration",
                 "-std=c++17",
             ],
             "@v8//bazel/config:is_gcc": [
@@ -136,6 +137,7 @@ def _default_args():
                 "-Wno-redundant-move",
                 "-Wno-return-type",
                 "-Wno-stringop-overflow",
+                "-Wno-nonnull",
                 # Use GNU dialect, because GCC doesn't allow using
                 # ##__VA_ARGS__ when in standards-conforming mode.
                 "-std=gnu++17",
diff --git a/src/compiler/graph-visualizer.cc b/src/compiler/graph-visualizer.cc
index dfe935e8b67..60e5bf78b32 100644
--- a/src/compiler/graph-visualizer.cc
+++ b/src/compiler/graph-visualizer.cc
@@ -294,7 +294,7 @@ void JsonPrintAllSourceWithPositionsWasm(
   os << "\"inlinings\": {";
   for (size_t i = 0; i < positions.size(); ++i) {
     if (i != 0) os << ", ";
-    DCHECK(source_map.contains(positions[i].inlinee_func_index));
+    DCHECK(source_map.find(positions[i].inlinee_func_index) != source_map.end());
     size_t source_id = source_map.find(positions[i].inlinee_func_index)->second;
     SourcePosition inlining_pos = positions[i].caller_pos;
     os << '"' << i << "\": {\"inliningId\": " << i
