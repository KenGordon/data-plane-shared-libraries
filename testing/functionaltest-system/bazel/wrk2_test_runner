#!/bin/bash

set -o errexit

declare PROTOCOL=https
declare -a WRK2_ARGS=()

function usage() {
  local -r -i exitval=$1
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
    --endpoint-hostport <host:port> host:port string
    --docker-network <name>         docker network
    --rpc <rpc name>                rpc name
    --request <filename>            request.json filename
    --request-rate <integer>        number of requests per second (throughput)
    --connections <integer>         number of connections to keep open
    --duration <string>             duration of test (e.g. 2s, 2m, 2h)
    --threads <integer>             number of threads to use
    --latency                       print latency statistics
    --timeout <string>              request timeout (e.g. 2s, 2m, 2h)
    --lua-script <filename>         lua script file
    --plaintext                     send plaintext request
    --http-path <string>            path used with endpoint hostport
environment variables:
    TEST_TOOLS_IMAGE                docker image uri for test tools
    WORKSPACE                       repo root directory, must be an absolute path
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --endpoint-hostport)
      ENDPOINT_HOSTPORT="$2"
      shift 2
      ;;
    --docker-network)
      DOCKER_NETWORK="$2"
      shift 2
      ;;
    --rpc)
      RPC="$2"
      shift 2
      ;;
    --request)
      REQUEST_FILENAME="$2"
      shift 2
      ;;
    --request-rate)
      REQUEST_RATE="$2"
      WRK2_ARGS+=("-R$2")
      shift 2
      ;;
    --connections)
      WRK2_ARGS+=("-c$2")
      shift 2
      ;;
    --duration)
      WRK2_ARGS+=("-d$2")
      shift 2
      ;;
    --threads)
      WRK2_ARGS+=("-t$2")
      shift 2
      ;;
    --latency)
      WRK2_ARGS+=("--latency")
      shift
      ;;
    --timeout)
      WRK2_ARGS+=("--timeout $2")
      shift 2
      ;;
    --lua-script)
      LUA_SCRIPT_FILENAME="$(realpath "$2")"
      shift 2
      ;;
    --plaintext)
      PROTOCOL=http
      shift
      ;;
    --http-path)
      HTTP_PATH="$2"
      shift 2
      ;;
    --help | -h) usage 0 ;;
    *) usage 1 ;;
  esac
done

: "${ENDPOINT_HOSTPORT?"Error: --endpoint-hostport not specified"}"
: "${RPC?"Error: --rpc must be specified"}"
: "${REQUEST_RATE?"Error: --request-rate must be specified"}"
: "${TEST_TOOLS_IMAGE?"Error: Test tools image URI not specified in TEST_TOOLS_IMAGE env var"}"

declare -r REPORT_FILE=wrk2_report.json
declare -a DOCKER_ARGS=(
  "--rm"
  "--interactive"
  "--entrypoint=/bin/bash"
)

LUA_DIR="$(mktemp --directory)"
readonly LUA_DIR
chmod 755 "${LUA_DIR}"
declare -r DOCKER_LUA_DIR=/src/wrk2
DOCKER_ARGS+=(
  "--volume=${LUA_DIR}:${DOCKER_LUA_DIR}"
)
declare -r REQUEST_FNAME=request_data

if [[ -n ${REQUEST_FILENAME} ]]; then
  cp "${REQUEST_FILENAME}" "${LUA_DIR}/${REQUEST_FNAME}"
fi

if [[ -z ${HTTP_PATH} ]]; then
  HTTP_PATH="${RPC%.*}"/"${RPC##*.}"
fi

if [[ -n ${DOCKER_NETWORK} ]]; then
  DOCKER_ARGS+=("--network=${DOCKER_NETWORK}")
fi

declare -r LUA_SCRIPT_FNAME=script.lua

if [[ -n ${LUA_SCRIPT_FILENAME} ]] && [[ -s ${LUA_SCRIPT_FILENAME} ]]; then
  DOCKER_ARGS+=(
    "--volume=${WORKSPACE}:/src/workspace"
    "--workdir=/src/workspace"
  )
  cp "${LUA_SCRIPT_FILENAME}" "${LUA_DIR}/${LUA_SCRIPT_FNAME}"
else
  cat >"${LUA_DIR}/${LUA_SCRIPT_FNAME}" <<EOF
wrk.method = "POST"
wrk.headers["Content-Type"] = "application/json"

f = assert(io.open("${DOCKER_LUA_DIR}/${REQUEST_FNAME}", "rb"))
body_1 = f:read("*all")
body_1 = body_1:gsub("[\n\r]", " ")
f:close()

function request()
    return wrk.format(nil, nil, nil, body_1)
end

response = function(status, header, body)
    if status > 200 then
        print("status:" .. status)
        print(body)
        print("-------------------------------------------------");
    end
end
EOF
fi

WRK2_ARGS+=(
  -s "${DOCKER_LUA_DIR}/${LUA_SCRIPT_FNAME}"
  "${PROTOCOL}://${ENDPOINT_HOSTPORT}/${HTTP_PATH}"
)
declare -r DOCKER_CMD="set -o errexit; wrk2 ${WRK2_ARGS[*]}"
docker run "${DOCKER_ARGS[@]}" "${TEST_TOOLS_IMAGE}" -c "${DOCKER_CMD}" >"${TEST_UNDECLARED_OUTPUTS_DIR}/${REPORT_FILE}"
